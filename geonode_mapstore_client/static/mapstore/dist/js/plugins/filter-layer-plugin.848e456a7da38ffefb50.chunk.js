(self.webpackChunkgeonode_mapstore_client=self.webpackChunkgeonode_mapstore_client||[]).push([[95127],{290675:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>p});var r=n(124852),o=n.n(r),l=n(171703),i=n(322843),c=n(640512),a=["onClick","selectedNodes","status","itemComponent","statusTypes"];function u(){return u=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},u.apply(this,arguments)}var s=(0,l.connect)((function(){return{}}),{onClick:c.Zq})((function(e){var t,n=e.onClick,r=e.selectedNodes,l=e.status,i=e.itemComponent,c=e.statusTypes,s=function(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n={};for(var r in e)if(Object.prototype.hasOwnProperty.call(e,r)){if(t.indexOf(r)>=0)continue;n[r]=e[r]}return n}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}(e,a),p=i,f=null==r||null===(t=r[0])||void 0===t?void 0:t.node;return![c.LAYER].includes(l)||null==f||!f.search||null!=f&&f.error?null:o().createElement(p,u({},s,{glyph:"filter-layer",tooltipId:"toc.layerFilterTooltip",onClick:function(){return n()}}))}));const p=(0,i.rx)("FilterLayer",{component:function(){return null},containers:{TOC:[{name:"FilterLayer",target:"toolbar",Component:s,position:6}]}})}}]);