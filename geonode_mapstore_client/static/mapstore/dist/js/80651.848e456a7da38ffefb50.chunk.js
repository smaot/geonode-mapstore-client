(self.webpackChunkgeonode_mapstore_client=self.webpackChunkgeonode_mapstore_client||[]).push([[80651],{180651:(r,e,o)=>{"use strict";function t(r,e,o){if(!i(o=o||{}))throw new Error("options is invalid");var t=o.bbox,u=o.id;if(void 0===r)throw new Error("geometry is required");if(e&&e.constructor!==Object)throw new Error("properties must be an Object");t&&function(r){if(!r)throw new Error("bbox is required");if(!Array.isArray(r))throw new Error("bbox must be an Array");if(4!==r.length&&6!==r.length)throw new Error("bbox must be an Array of 4 or 6 numbers");r.forEach((function(r){if(!n(r))throw new Error("bbox must only contain numbers")}))}(t),u&&function(r){if(!r)throw new Error("id is required");if(-1===["string","number"].indexOf(typeof r))throw new Error("id must be a number or a string")}(u);var s={type:"Feature"};return u&&(s.id=u),t&&(s.bbox=t),s.properties=e||{},s.geometry=r,s}function n(r){return!isNaN(r)&&null!==r&&!Array.isArray(r)}function i(r){return!!r&&r.constructor===Object}function u(r,e,o){if(null!==r)for(var t,n,i,s,a,f,l,c,g=0,w=0,b=r.type,h="FeatureCollection"===b,y="Feature"===b,m=h?r.features.length:1,d=0;d<m;d++){a=(c=!!(l=h?r.features[d].geometry:y?r.geometry:r)&&"GeometryCollection"===l.type)?l.geometries.length:1;for(var p=0;p<a;p++){var E=0,v=0;if(null!==(s=c?l.geometries[p]:l)){f=s.coordinates;var k=s.type;switch(g=!o||"Polygon"!==k&&"MultiPolygon"!==k?0:1,k){case null:break;case"Point":if(!1===e(f,w,d,E,v))return!1;w++,E++;break;case"LineString":case"MultiPoint":for(t=0;t<f.length;t++){if(!1===e(f[t],w,d,E,v))return!1;w++,"MultiPoint"===k&&E++}"LineString"===k&&E++;break;case"Polygon":case"MultiLineString":for(t=0;t<f.length;t++){for(n=0;n<f[t].length-g;n++){if(!1===e(f[t][n],w,d,E,v))return!1;w++}"MultiLineString"===k&&E++,"Polygon"===k&&v++}"Polygon"===k&&E++;break;case"MultiPolygon":for(t=0;t<f.length;t++){for("MultiPolygon"===k&&(v=0),n=0;n<f[t].length;n++){for(i=0;i<f[t][n].length-g;i++){if(!1===e(f[t][n][i],w,d,E,v))return!1;w++}v++}E++}break;case"GeometryCollection":for(t=0;t<s.geometries.length;t++)if(!1===u(s.geometries[t],e,o))return!1;break;default:throw new Error("Unknown Geometry Type")}}}}}o.d(e,{Z:()=>a});const s=function(r){var e=[1/0,1/0,-1/0,-1/0];return u(r,(function(r){e[0]>r[0]&&(e[0]=r[0]),e[1]>r[1]&&(e[1]=r[1]),e[2]<r[0]&&(e[2]=r[0]),e[3]<r[1]&&(e[3]=r[1])})),e},a=function(r,e){if(!i(e=e||{}))throw new Error("options is invalid");var o=e.properties;if(!r)throw new Error("geojson is required");var u=s(r);return function(r,e,o){if(!r)throw new Error("coordinates is required");if(!Array.isArray(r))throw new Error("coordinates must be an Array");if(r.length<2)throw new Error("coordinates must be at least 2 numbers long");if(!n(r[0])||!n(r[1]))throw new Error("coordinates must contain numbers");return t({type:"Point",coordinates:r},e,o)}([(u[0]+u[2])/2,(u[1]+u[3])/2],o)}}}]);